var sys=require("util"),debug=require("util").debug,inspect=require("util").inspect,Buffer=require("buffer").Buffer,BSON=require("../../ext/bson").BSON,Buffer=require("buffer").Buffer,BSONJS=require("../../lib/bson/bson").BSON,BinaryParser=require("../../lib/bson/binary_parser").BinaryParser,Long=require("../../lib/bson/long").Long,ObjectID=require("../../lib/bson/bson").ObjectID,Binary=require("../../lib/bson/bson").Binary,Code=require("../../lib/bson/bson").Code,DBRef=require("../../lib/bson/bson").DBRef,Symbol=require("../../lib/bson/bson").Symbol,Double=require("../../lib/bson/bson").Double,MaxKey=require("../../lib/bson/bson").MaxKey,MinKey=require("../../lib/bson/bson").MinKey,Timestamp=require("../../lib/bson/bson").Timestamp,gleak=require("../../tools/gleak"),assert=require("assert");var bsonC=new BSON([Long,ObjectID,Binary,Code,DBRef,Symbol,Double,Timestamp,MaxKey,MinKey]);var bsonJS=new BSONJS([Long,ObjectID,Binary,Code,DBRef,Symbol,Double,Timestamp,MaxKey,MinKey]);exports.setUp=function(a){a()};exports.tearDown=function(a){a()};exports["Should Correctly Serialize and Deserialize simple edge value"]=function(c){var a={doc:9007199254740990};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));var a={doc:-9007199254740990};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Should Correctly execute toJSON"]=function(e){var b=Long.fromNumber(10);assert.equal(10,b);var b=Long.fromNumber(9.223372036854776e+18);assert.equal(9.223372036854776e+18,b);var c={doc:"Serialize"};var d=bsonC.serialize(c,true,false);assert.deepEqual(d,bsonJS.serialize(c,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(d,"binary")),bsonC.deserialize(d));e.done()};exports["Should Serialize and Deserialize nested document"]=function(c){var a={a:{b:{c:1}}};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple integer serialization/deserialization test, including testing boundary conditions"]=function(c){var a={doc:-1};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));var a={doc:2147483648};var b=bsonC.serialize(a,false,true);assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));var a={doc:-2147483648};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple serialization and deserialization test for a Long value"]=function(c){var a={doc:Long.fromNumber(9.223372036854776e+18)};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize({doc:Long.fromNumber(9.223372036854776e+18)},false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));var a={doc:Long.fromNumber(-9.223372036854776e+18)};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize({doc:Long.fromNumber(-9.223372036854776e+18)},false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple serialization and deserialization for a Float value"]=function(c){var a={doc:2222.3333};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));var a={doc:-2222.3333};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple serialization and deserialization for a null value"]=function(c){var a={doc:null};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple serialization and deserialization for a boolean value"]=function(c){var a={doc:true};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")),bsonC.deserialize(b));c.done()};exports["Simple serialization and deserialization for a date value"]=function(d){var a=new Date();var b={doc:a};var c=bsonC.serialize(b,false,true);assert.deepEqual(c,bsonJS.serialize(b,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(c,"binary")),bsonC.deserialize(c));d.done()};exports["Simple serialization and deserialization for a boolean value"]=function(c){var a={doc:/abcd/mi};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.equal(bsonJS.deserialize(new Buffer(b,"binary")).doc.toString(),bsonC.deserialize(b).doc.toString());var a={doc:/abcd/};var b=bsonC.serialize(a,false,true);assert.deepEqual(b,bsonJS.serialize(a,false,true));assert.equal(bsonJS.deserialize(new Buffer(b,"binary")).doc.toString(),bsonC.deserialize(b).doc.toString());c.done()};exports["Simple serialization and deserialization for a objectId value"]=function(d){var a={doc:new ObjectID()};var c=bsonC.serialize(a,false,true);var b={doc:ObjectID.createFromHexString(a.doc.toHexString())};assert.deepEqual(c,bsonJS.serialize(b,false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(c,"binary")).doc.toString(),bsonC.deserialize(c).doc.toString());d.done()};exports["Simple serialization and deserialization for a Binary value"]=function(e){var a=new Binary();var d="binstring";for(var b=0;b<d.length;b++){a.put(d.charAt(b))}var c=bsonC.serialize({doc:a},false,true);assert.deepEqual(c,bsonJS.serialize({doc:a},false,true));assert.deepEqual(bsonJS.deserialize(new Buffer(c,"binary")).doc.value(),bsonC.deserialize(c).doc.value());e.done()};exports["Simple serialization and deserialization for a Code value"]=function(d){var a=new Code("this.a > i",{i:1});var c=bsonJS.serialize({doc:a},false,true);var b=bsonC.serialize({doc:a},false,true);assert.deepEqual(b,c);assert.deepEqual(bsonJS.deserialize(new Buffer(c,"binary")).doc.scope,bsonC.deserialize(b).doc.scope);d.done()};exports["Simple serialization and deserialization for an Object"]=function(c){var a=bsonC.serialize({doc:{a:1,b:{c:2}}},false,true);var b=bsonJS.serialize({doc:{a:1,b:{c:2}}},false,true);assert.deepEqual(a,b);assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")).doc,bsonC.deserialize(a).doc);var a=bsonC.serialize({doc:[9,9,1,2,3,1,1,1,1,1,1,1]},false,true);var b=bsonJS.serialize({doc:[9,9,1,2,3,1,1,1,1,1,1,1]},false,true);assert.deepEqual(a,b);assert.deepEqual(bsonJS.deserialize(new Buffer(b,"binary")).doc,bsonC.deserialize(a).doc);c.done()};exports["Simple serialization and deserialization for a DBRef"]=function(g){var c=new ObjectID();var d=new ObjectID.createFromHexString(c.toHexString());var e=bsonJS.serialize({doc:new DBRef("namespace",d,"integration_tests_")},false,true);var f=bsonC.serialize({doc:new DBRef("namespace",c,"integration_tests_")},false,true);assert.deepEqual(e,f);var b=bsonJS.deserialize(new Buffer(f,"binary"));var a=bsonC.deserialize(e);assert.equal(b.doc.namespace,a.doc.namespace);assert.equal(b.doc.oid.toHexString(),a.doc.oid.toHexString());assert.equal(b.doc.db,a.doc.db);g.done()};exports["Should correctly deserialize bytes array"]=function(e){var a=[47,0,0,0,2,110,97,109,101,0,6,0,0,0,80,97,116,116,121,0,16,97,103,101,0,34,0,0,0,7,95,105,100,0,76,100,12,23,11,30,39,8,89,0,0,1,0];var d="";for(var b=0;b<a.length;b++){d=d+BinaryParser.fromByte(a[b])}var c=bsonC.deserialize(new Buffer(d,"binary"));assert.equal("Patty",c.name);assert.equal(34,c.age);assert.equal("4c640c170b1e270859000001",c._id.toHexString());e.done()};exports["Serialize utf8"]=function(e){var a={name:"???????????",name1:"öüóoúéáuíÖÜÓOÚÉÁUÍ",name2:"abcdedede"};var c=bsonC.serialize(a,false,true);var d=bsonJS.serialize(a,false,true);assert.deepEqual(c,d);var b=bsonC.deserialize(c);assert.equal(a.name,b.name);assert.equal(a.name1,b.name1);assert.equal(a.name2,b.name2);e.done()};exports["Serialize object with array"]=function(e){var a={b:[1,2,3]};var c=bsonC.serialize(a,false,true);var d=bsonJS.serialize(a,false,true);assert.deepEqual(c,d);var b=bsonC.deserialize(c);assert.deepEqual(a,b);e.done()};exports["Test equality of an object ID"]=function(c){var a=new ObjectID();var b=new ObjectID();assert.ok(a.equals(a));assert.ok(!(a.equals(b)));c.done()};exports["Test same serialization for Object ID"]=function(g){var b=new ObjectID();var c=ObjectID.createFromHexString(b.toString());var e=bsonJS.serialize({doc:b},false,true);var f=bsonC.serialize({doc:c},false,true);assert.equal(f.length,e.length);assert.deepEqual(e,f);var a=bsonJS.deserialize(new Buffer(f,"binary"));var d=bsonC.deserialize(e);assert.equal(a.doc.id,d.doc.id);g.done()};exports["Complex object serialization"]=function(j){var a={_id:new ObjectID,comments:[],title:"number 1"};var b={_id:new ObjectID,comments:[],title:"number 2"};var c={numbers:[],owners:[],comments:[a,b],_id:new ObjectID};var g=bsonJS.serialize(c,false,true);var a={_id:ObjectID.createFromHexString(a._id.toHexString()),comments:[],title:"number 1"};var b={_id:ObjectID.createFromHexString(b._id.toHexString()),comments:[],title:"number 2"};var c={numbers:[],owners:[],comments:[a,b],_id:ObjectID.createFromHexString(c._id.toHexString())};var h=bsonC.serialize(c,false,true);for(var f=0;f<h.length;f++){assert.equal(h[f],g[f])}var d=bsonJS.deserialize(new Buffer(h));var e=bsonC.deserialize(new Buffer(h));assert.equal(c._id.id,d._id.id);assert.equal(c._id.id,e._id.id);assert.equal(d._id.id,e._id.id);var c={_id:"testid",key1:{code:"test1",time:{start:1309323402727,end:1309323402727},x:10,y:5},key2:{code:"test1",time:{start:1309323402727,end:1309323402727},x:10,y:5}};var g=bsonJS.serialize(c,false,true);var h=bsonC.serialize(c,false,true);j.done()};exports["Serialize function"]=function(f){var a={_id:"testid",key1:function(){}};var d=bsonJS.serialize(a,false,true,true);var e=bsonC.serialize(a,false,true,true);var b=bsonJS.deserialize(new Buffer(e));var c=bsonC.deserialize(new Buffer(e));assert.equal(b.key1.code.toString(),c.key1.code.toString());f.done()};exports["Serialize document with special operators"]=function(f){var a={user_id:"4e9fc8d55883d90100000003",lc_status:{"$ne":"deleted"},owner_rating:{"$exists":false}};var d=bsonJS.serialize(a,false,true,true);var e=bsonC.serialize(a,false,true,true);assert.equal(e.toString("base64"),d.toString("base64"));var b=bsonJS.deserialize(e);var c=bsonC.deserialize(d);assert.deepEqual(b,c);f.done()};exports["Create ObjectID from hex string"]=function(f){var e=new ObjectID().toString();var c={_id:ObjectID.createFromHexString(e),"funds.remaining":{$gte:1.222},"transactions.id":{$ne:ObjectID.createFromHexString(e)}};var a={_id:ObjectID.createFromHexString(e),"funds.remaining":{$gte:1.222},"transactions.id":{$ne:ObjectID.createFromHexString(e)}};var d=bsonJS.serialize(c,false,true,true);var b=bsonC.serialize(a,false,true,true);assert.equal(b.toString("base64"),d.toString("base64"));f.done()};exports["Serialize big complex document"]=function(d){var a={DateTime:"Tue Nov 40 2011 17:27:55 GMT+0000 (WEST)",isActive:true,Media:{URL:"http://videos.sapo.pt/Tc85NsjaKjj8o5aV7Ubb"},Title:"Lisboa fecha a ganhar 0.19%",SetPosition:60,Type:"videos",Thumbnail:[{URL:"http://rd3.videos.sapo.pt/Tc85NsjaKjj8o5aV7Ubb/pic/320x240",Dimensions:{Height:240,Width:320}}],Source:{URL:"http://videos.sapo.pt",SetID:"1288",SourceID:"http://videos.sapo.pt/tvnet/rss2",SetURL:"http://noticias.sapo.pt/videos/tv-net_1288/",ItemID:"Tc85NsjaKjj8o5aV7Ubb",Name:"SAPO VÃ­deos"},Category:"Tec_ciencia",Description:"Lisboa fecha a ganhar 0.19%",GalleryID:new ObjectID("4eea2a634ce8573200000000"),InternalRefs:{RegisterDate:"Thu Dec 15 2011 17:12:51 GMT+0000 (WEST)",ChangeDate:"Thu Dec 15 2011 17:12:51 GMT+0000 (WEST)",Hash:332279244514},_id:new ObjectID("4eea2a96e52778160000003a")};var c=bsonJS.serialize(a,false,true,true);var b=bsonC.serialize(a,false,true,true);assert.equal(b.toString("base64"),c.toString("base64"));d.done()};exports.noGlobalsLeaked=function(b){var a=gleak.detectNew();b.equal(0,a.length,"global var leak detected: "+a.join(", "));b.done()};