/*
 * Access driver.
 */
var driver=global.MONGOOSE_DRIVER_PATH||"../drivers/node-mongodb-native";
/*
 * Module dependencies.
 */
var Binary=require(driver+"/binary");function MongooseBuffer(i,c,f){var e=arguments.length;var h;if(0===e||null===arguments[0]||undefined===arguments[0]){h=0}else{h=i}var d;var g;var b;if(Array.isArray(c)){g=c[0];b=c[1]}else{d=c}var a=new Buffer(h,d,f);a.__proto__=MongooseBuffer.prototype;Object.defineProperties(a,{validators:{value:[]},_path:{value:g},_parent:{value:b}});if(b&&"string"===typeof g){Object.defineProperty(a,"_schema",{value:b.schema.path(g)})}return a}
/*
 * Inherit from Buffer.
 */
MongooseBuffer.prototype=new Buffer(0);MongooseBuffer.prototype._parent;MongooseBuffer.prototype._markModified=function(){var a=this._parent;if(a){a.markModified(this._path)}return this};MongooseBuffer.prototype.write=function(){var a=Buffer.prototype.write.apply(this,arguments);if(a>0){this._markModified()}return a};MongooseBuffer.prototype.copy=function(b){var a=Buffer.prototype.copy.apply(this,arguments);if(b instanceof MongooseBuffer){b._markModified()}return a};
/*
 * Compile other Buffer methods marking this buffer as modified.
 */
("writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 writeFloat writeDouble fill utf8Write binaryWrite asciiWrite set writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE writeInt16LE writeInt16BE writeInt32LE writeInt32BE writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE").split(" ").forEach(function(a){if(!Buffer.prototype[a]){return}MongooseBuffer.prototype[a]=new Function("var ret = Buffer.prototype."+a+".apply(this, arguments);this._markModified();return ret;")});MongooseBuffer.prototype.toObject=function(a){a=typeof a!=="undefined"?a:0;return new Binary(this,a)};
/*
 * Module exports.
 */
MongooseBuffer.Binary=Binary;module.exports=MongooseBuffer;