/*
 * Module dependencies.
 */
var MongooseCollection=require("../../collection"),Collection=require("mongodb").Collection,STATES=require("../../connectionstate"),utils=require("../../utils");function NativeCollection(){this.collection=null;MongooseCollection.apply(this,arguments)}
/*
 * Inherit from abstract Collection.
 */
NativeCollection.prototype.__proto__=MongooseCollection.prototype;NativeCollection.prototype.onOpen=function(){var b=this;if(this.collection){return MongooseCollection.prototype.onOpen.call(b)}if(!b.opts.size){return b.conn.db.collection(b.name,a)}return b.conn.db.collection(b.name,function(e,d){if(e){return a(e)}d.options(function(c,f){if(c){return a(c)}if(f){if(f.capped){a(null,d)}else{var g="A non-capped collection exists with this name.\n\n To use this collection as a capped collection, please first convert it.\n http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-Convertingacollectiontocapped";c=new Error(g);a(c)}}else{var h=utils.clone(b.opts);h.capped=true;b.conn.db.createCollection(b.name,h,a)}})});function a(d,c){if(d){b.conn.emit("error",d)}else{b.collection=c;MongooseCollection.prototype.onOpen.call(b)}}};NativeCollection.prototype.onClose=function(){MongooseCollection.prototype.onClose.call(this)};
/*
 * Copy the collection methods and make them subject to queues
 */
for(var i in Collection.prototype){(function(a){NativeCollection.prototype[a]=function(){if(this.buffer){this.addQueue(a,arguments);return}var c=this.collection,b=arguments,e=this,d=e.conn.base.options.debug;if(d){if("function"===typeof d){d.apply(d,[e.name,a].concat(utils.args(b,0,b.length-1)))}else{console.error("\x1B[0;36mMongoose:\x1B[0m %s.%s(%s) %s %s %s",e.name,a,print(b[0]),print(b[1]),print(b[2]),print(b[3]))}}c[a].apply(c,b)}})(i)}
/*
 * Debug print helper
 */
function print(a){var b=typeof a;if("function"===b||"undefined"===b){return""}return format(a)}
/*
 * Debug print helper
 */
function format(d,e){var f=utils.clone(d);if(f){if("Binary"===f.constructor.name){f="[object Buffer]"}else{if("Object"===f.constructor.name){var c=Object.keys(f),a=c.length,b;while(a--){b=c[a];if(f[b]){if("Binary"===f[b].constructor.name){f[b]="[object Buffer]"}else{if("Object"===f[b].constructor.name){f[b]=format(f[b],true)}else{if(Array.isArray(f[b])){f[b]=f[b].map(function(g){return format(g,true)})}}}}}}}if(e){return f}}return require("util").inspect(f,false,10,true).replace(/\n/g,"").replace(/\s{2,}/g," ")}NativeCollection.prototype.getIndexes=NativeCollection.prototype.indexInformation;
/*
 * Module exports.
 */
module.exports=NativeCollection;