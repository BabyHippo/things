/*
 * Module dependencies.
 */
var SchemaType=require("../schematype"),CastError=SchemaType.CastError,MongooseBuffer=require("../types").Buffer,Binary=MongooseBuffer.Binary,Query=require("../query");function SchemaBuffer(a,b){SchemaType.call(this,a,b,"Buffer")}
/*
 * Inherits from SchemaType.
 */
SchemaBuffer.prototype.__proto__=SchemaType.prototype;SchemaBuffer.prototype.checkRequired=function(a){return !!(a&&a.length)};SchemaBuffer.prototype.cast=function(c,a,b){if(SchemaType._isRef(this,c,b)){return c}if(Buffer.isBuffer(c)){if(!(c instanceof MongooseBuffer)){c=new MongooseBuffer(c,[this.path,a])}return c}else{if(c instanceof Binary){return new MongooseBuffer(c.value(true),[this.path,a])}}if("string"===typeof c||Array.isArray(c)){return new MongooseBuffer(c,[this.path,a])}throw new CastError("buffer",c)};
/*
 * ignore
 */
function handleSingle(a){return this.castForQuery(a)}function handleArray(b){var a=this;return b.map(function(c){return a.castForQuery(c)})}SchemaBuffer.prototype.$conditionalHandlers={"$ne":handleSingle,"$in":handleArray,"$nin":handleArray,"$gt":handleSingle,"$lt":handleSingle,"$gte":handleSingle,"$lte":handleSingle};SchemaBuffer.prototype.castForQuery=function(a,c){var b;if(arguments.length===2){b=this.$conditionalHandlers[a];if(!b){throw new Error("Can't use "+a+" with Buffer.")}return b.call(this,c)}else{c=a;return this.cast(c).toObject()}};
/*
 * Module exports.
 */
module.exports=SchemaBuffer;