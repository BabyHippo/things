/*
 * Module requirements.
 */
var SchemaType=require("../schematype"),CastError=SchemaType.CastError;function SchemaDate(a,b){SchemaType.call(this,a,b)}
/*
 * Inherits from SchemaType.
 */
SchemaDate.prototype.__proto__=SchemaType.prototype;SchemaDate.prototype.checkRequired=function(a){return a instanceof Date};SchemaDate.prototype.cast=function(b){if(b===null||b===""){return null}if(b instanceof Date){return b}var a;if(b instanceof Number||"number"==typeof b||String(b)==Number(b)){a=new Date(Number(b))}else{if(b.toString){a=new Date(b.toString())}}if(a.toString()!="Invalid Date"){return a}throw new CastError("date",b)};
/*
 * Date Query casting.
 *
 * @api private
 */
function handleSingle(a){return this.cast(a)}function handleArray(b){var a=this;return b.map(function(c){return a.cast(c)})}SchemaDate.prototype.$conditionalHandlers={"$lt":handleSingle,"$lte":handleSingle,"$gt":handleSingle,"$gte":handleSingle,"$ne":handleSingle,"$in":handleArray,"$nin":handleArray,"$all":handleArray};SchemaDate.prototype.castForQuery=function(a,c){var b;if(2!==arguments.length){return this.cast(a)}b=this.$conditionalHandlers[a];if(!b){throw new Error("Can't use "+a+" with Date.")}return b.call(this,c)};
/*
 * Module exports.
 */
module.exports=SchemaDate;