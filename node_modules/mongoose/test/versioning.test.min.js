var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error;var Comments=new Schema();Comments.add({title:String,date:Date,comments:[Comments]});var BlogPost=new Schema({title:String,date:Date,meta:{date:Date,visitors:Number,nested:[Comments],numbers:[Number]},mixed:{},numbers:[Number],comments:[Comments],arr:[]},{collection:"versioning_"+random()});mongoose.model("Versioning",BlogPost);describe("versioning",function(){it("works",function(c){var a=start(),q=a.model("Versioning");var b=new q;b.title="testing versioning";b.date=new Date;b.meta.date=new Date;b.meta.visitors=34;b.meta.numbers=[12,11,10];b.meta.nested=[{title:"does it work?",date:new Date},{title:"1",comments:[{title:"this is sub #1"},{title:"this is sub #2"}]},{title:"2",comments:[{title:"this is sub #3"},{title:"this is sub #4"}]},{title:"hi",date:new Date}];b.mixed={arr:[12,11,10]};b.numbers=[3,4,5,6,7];b.comments=[{title:"comments 0",date:new Date},{title:"comments 1",comments:[{title:"comments.1.comments.1"},{title:"comments.1.comments.2"}]},{title:"coments 2",comments:[{title:"comments.2.comments.1"},{title:"comments.2.comments.2"}]},{title:"comments 3",date:new Date}];b.arr=[["2d"]];b.save(function(t){var r,s;assert.ifError(t);q.findById(b,function(v,u){assert.ifError(v);r=u;r&&s&&e(r,s)});q.findById(b,function(v,u){assert.ifError(v);s=u;r&&s&&e(r,s)})});function e(r,s){r.meta.numbers.push(9);s.meta.numbers.push(8);d(r,s,i)}function i(t,r,s){assert.ifError(t);assert.equal(r.meta.numbers.length,5);assert.equal(r._doc.__v,2);r.meta.numbers.pull(10);s.meta.numbers.push(20);d(r,s,j)}function j(t,r,s){assert.ifError(t);assert.equal(r.meta.numbers.length,5);assert.equal(s.meta.numbers.length,5);assert.equal(-1,r.meta.numbers.indexOf(10));assert.ok(~r.meta.numbers.indexOf(20));assert.equal(r._doc.__v,4);r.numbers.pull(3,20);s.set("numbers.2",100);d(r,s,k)}function k(u,r,s){assert.ok(/No matching document/.test(u),u);assert.equal(r._doc.__v,5);r.set("arr.0.0","updated");var t=r._delta();assert.equal(r._doc.__v,t[0].__v,"version should be added to where clause");assert.ok(!("$inc" in t[1]));d(r,s,l)}function l(t,r,s){assert.ifError(t);assert.equal("updated",r.arr[0][0]);assert.equal(r._doc.__v,5);r.set("arr.0","not an array");s.arr.pull(10);s.arr.addToSet("using set");d(r,s,m)}function m(t,r,s){assert.ifError(t);assert.equal(r.arr.length,2);assert.equal("updated",r.arr[0][0]);assert.equal("using set",r.arr[1]);assert.equal(r._doc.__v,6);s.set("arr.0","not an array");r.arr.pull("using set");r.arr.push("woot","woot2");r.arr.$pop();d(r,s,n)}function n(t,r,s){assert.ok(/No matching document/.test(t),"changes to b should not be applied");assert.equal(r.arr.length,2);assert.equal("updated",r.arr[0][0]);assert.equal("woot",r.arr[1]);assert.equal(r._doc.__v,7);r.meta.nested.$pop();s.meta.nested.$pop();d(r,s,o)}function o(t,r,s){assert.ok(/No matching document/.test(t),"changes to b should not be applied");assert.equal(r.meta.nested.length,3);assert.equal(r._doc.__v,8);r.meta.nested.push({title:"the"});r.meta.nested.push({title:"killing"});s.meta.nested.push({title:"biutiful"});d(r,s,p)}function p(t,r,s){assert.ifError(t);assert.equal(6,r.meta.nested.length);assert.equal(r._doc.__v,10);r.meta.nested[2].title="two";s.meta.nested[0].title="zero";s.meta.nested[1].comments[0].title="sub one";d(r,s,function(w,u,v){assert.ifError(w);assert.equal(r._doc.__v,10);assert.equal(s._doc.__v,10);f(null,u,v)})}function f(t,r,s){assert.ifError(t);assert.equal("two",s.meta.nested[2].title);assert.equal("zero",s.meta.nested[0].title);assert.equal("sub one",s.meta.nested[1].comments[0].title);assert.equal(r._doc.__v,10);assert.equal(3,r.mixed.arr.length);r.mixed.arr.push([10],{x:1},"woot");r.markModified("mixed.arr");d(r,s,g)}function g(u,r,s){assert.ifError(u);assert.equal(r._doc.__v,11);assert.equal(6,r.mixed.arr.length);assert.equal(1,r.mixed.arr[4].x);assert.equal("woot",r.mixed.arr[5]);assert.equal(10,r.mixed.arr[3][0]);r.comments.addToSet({title:"monkey"});s.markModified("comments");var t=s._delta();assert.ok(t[1].$inc,"a $set of an array should trigger versioning");d(r,s,h)}function h(u,r,s){assert.ok(/No matching document/.test(u),"changes to b should not be applied");assert.equal(5,r.comments.length);r.comments.addToSet({title:"aven"});r.comments.addToSet({title:"avengers"});var t=r._delta();assert.equal(undefined,t[0].__v,"version should not be included in where clause");assert.ok(!t[1].$set);assert.ok(t[1].$addToSet);assert.ok(t[1].$addToSet.comments);r.comments.$shift();var t=r._delta();assert.equal(12,t[0].__v,"version should be included in where clause");assert.ok(t[1].$set,"two differing atomic ops on same path should create a $set");assert.ok(t[1].$inc,"a $set of an array should trigger versioning");assert.ok(!t[1].$addToSet);a.close();c()}function d(r,s,t){var w=2;var u;r.save(function(x){if(x){u=x}if(--w){return}v()});s.save(function(x){if(x){u=x}if(--w){return}v()});function v(){var x,y;q.findById(r,function(A,z){if(A){u=A}x=z;x&&y&&t(u,x,y)});q.findById(s,function(A,z){if(A){u=A}y=z;x&&y&&t(u,x,y)})}}});it("versioning without version key",function(c){var a=start(),e=a.model("Versioning");var b=new e;b.numbers=[3,4,5,6,7];b.comments=[{title:"does it work?",date:new Date},{title:"1",comments:[{title:"this is sub #1"},{title:"this is sub #2"}]},{title:"2",comments:[{title:"this is sub #3"},{title:"this is sub #4"}]},{title:"hi",date:new Date}];b.save(d);function d(f){assert.ifError(f);e.findById(b).select("numbers comments").exec(function(i,h){a.close();assert.ifError(i);h.comments[0].title="no version was included";var g=h._delta();assert.ok(!g[0].__v,"no version key was selected so should not be included");c()})}});it("version works with strict docs",function(b){var a=start();var e=new Schema({str:["string"]},{strict:true,collection:"versionstrict_"+random()});var d=a.model("VersionStrict",e);var c=new d({str:["death","to","smootchy"]});c.save(function(f){assert.ifError(f);d.find(c,function(g,h){assert.ifError(g);assert.equal(1,h.length);h=h[0];assert.equal(0,h._doc.__v);h.str.pull("death");h.save(function(i){assert.ifError(i);d.findById(h,function(j,k){a.close();assert.ifError(j);assert.equal(1,k._doc.__v);assert.equal(2,k.str.length);assert.ok(!~k.str.indexOf("death"));b()})})})})});it("version works with existing unversioned docs",function(b){var a=start(),c=a.model("Versioning");c.collection.insert({title:"unversioned",numbers:[1,2,3]},{safe:true},function(d){assert.ifError(d);c.findOne({title:"unversioned"},function(f,e){assert.ifError(f);assert.ok(!e._doc.__v);e.numbers.splice(1,1,10);var g=e._delta();assert.equal(undefined,g[0].__v);assert.ok(g[1].$inc);assert.equal(1,g[1].$inc.__v);e.save(function(i,h){assert.ifError(i);assert.equal(1,h._doc.__v);c.findById(h,function(k,j){a.close();assert.ifError(k);assert.ok(j);b()})})})})});it("versionKey is configurable",function(b){var a=start();var c=new Schema({configured:"bool"},{versionKey:"lolwat",collection:"configuredversion"+random()});var e=a.model("ConfiguredVersionKey",c);var d=new e({configured:true});d.save(function(f){assert.ifError(f);e.findById(d,function(g,h){a.close();assert.ifError(g);assert.equal(0,h._doc.lolwat);b()})})});it("can be disabled",function(b){var a=start();var d=Schema({x:["string"]},{versionKey:false});var c=a.model("disabledVersioning",d,"s"+random());c.create({x:["hi"]},function(f,e){assert.ifError(f);assert.equal(false,"__v" in e._doc);e.x.pull("hi");e.save(function(h){assert.ifError(h);assert.equal(false,"__v" in e._doc);e.set("x.0","updated");var g=e._delta()[0];assert.equal(undefined,g.__v,"version should not be added to where clause");c.collection.findOne({_id:e._id},function(j,i){assert.equal(false,"__v" in i);b()})})})})});