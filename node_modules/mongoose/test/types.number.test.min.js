var mongoose=require("./common").mongoose,SchemaNumber=mongoose.Schema.Types.Number,assert=require("assert");describe("types.number",function(){it("an empty string casts to null",function(){var a=new SchemaNumber();assert.strictEqual(a.cast(""),null)});it("a null number should castForQuery to null",function(){var a=new SchemaNumber();assert.strictEqual(a.castForQuery(null),null)});it("undefined throws number cast error",function(){var c=new SchemaNumber();var b;try{c.cast(undefined)}catch(a){b=a}assert.strictEqual(true,!!b)});it("array throws cast number error",function(){var c=new SchemaNumber();var b;try{c.cast([])}catch(a){b=a}assert.strictEqual(true,!!b)});it("three throws cast number error",function(){var c=new SchemaNumber();var b;try{c.cast("three")}catch(a){b=a}assert.strictEqual(true,!!b)});it("{} throws cast number error",function(){var c=new SchemaNumber();var b;try{c.cast({})}catch(a){b=a}assert.strictEqual(true,!!b)});it("does not throw number cast error",function(){var g=new SchemaNumber();var d=[1,"2","0",null,"",new String("47"),new Number(5),Number(47),9,18];var b;try{for(var c=0,f=d.length;c<f;++c){g.cast(d[c])}}catch(a){b=a}assert.strictEqual(false,!!b,b)})});