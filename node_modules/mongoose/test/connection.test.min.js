var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,Schema=mongoose.Schema;describe("connections:",function(){it("should allow closing a closed connection",function(c){var b=mongoose.createConnection(),a=false;assert.equal(0,b.readyState);b.close(c)});it("should accept valid arguments",function(){var a=mongoose.createConnection("mongodb://localhost/fake");a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal(undefined,a.pass);assert.equal(undefined,a.user);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27017,a.port);a.close();a=mongoose.createConnection("mongodb://localhost:27000/fake");a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(27000,a.port);a.close();a=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake");a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("psw",a.pass);assert.equal("aaron",a.user);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27000,a.port);a.close();a=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{db:{forceServerObjectId:true}});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);a.close();a=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{server:{auto_reconnect:false}});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(false,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);a.close();a=mongoose.createConnection("127.0.0.1","faker",28000,{server:{auto_reconnect:true}});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(28000,a.port);a.close();a=mongoose.createConnection("127.0.0.1","faker",28001);a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(28001,a.port);a.close();a=mongoose.createConnection("127.0.0.1","faker",{blah:1});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(27017,a.port);assert.equal(1,a.options.blah);a.close();a=mongoose.createConnection("127.0.0.1","faker");a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(27017,a.port);a.close();a=mongoose.createConnection("aaron:psw@localhost","fake",27000);a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27000,a.port);assert.equal("psw",a.pass);assert.equal("aaron",a.user);a.close();a=mongoose.createConnection("localhost","fake",27000,{user:"aaron",pass:"psw"});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27000,a.port);assert.equal("psw",a.pass);assert.equal("aaron",a.user);a.close();a=mongoose.createConnection("localhost","fake",27000,{user:"no_pass"});a.on("error",function(b){});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27000,a.port);assert.equal(undefined,a.pass);assert.equal(undefined,a.user);a.close()});describe("missing protocols",function(){it("are allowed with replsets",function(){var a=mongoose.createConnection("localhost:12345,127.0.0.1:14326",function(b){assert.ok(b)});assert.deepEqual(["localhost","127.0.0.1"],a.host);assert.deepEqual([12345,14326],a.port)});it("are allowed with single connections",function(){var a=mongoose.createConnection();a.doOpen=function(){};a.open("localhost:12345/woot");assert.deepEqual("localhost",a.host);assert.deepEqual(12345,a.port)})});describe("connect callbacks",function(){it("execute with user:pwd connection strings",function(b){var a=mongoose.createConnection("mongodb://aaron:psw@localhost:27000/fake",{server:{auto_reconnect:true}},function(){b()});a.on("error",function(c){assert.ok(c)});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);a.close()});it("execute without user:pwd connection strings",function(b){var a=mongoose.createConnection("mongodb://localhost/fake",b);a.on("error",function(c){assert.ok(c)});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal(undefined,a.user);assert.equal("fake",a.name);assert.equal("localhost",a.host);assert.equal(27017,a.port);a.close()});it("should return an error if malformed uri passed",function(b){var a=mongoose.createConnection("mongodb:///fake",function(c){assert.equal("Missing connection hostname.",c.message);b()});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal(undefined,a.name);assert.equal(undefined,a.host);assert.equal(undefined,a.port);a.close()});it("should return an error if db was not specified",function(b){var a=mongoose.createConnection("mongodb://localhost",function(c){assert.equal("Missing connection database.",c.message);b()});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal(undefined,a.name);assert.equal(undefined,a.host);assert.equal(undefined,a.port);a.close()});it("should fire when individual args are passed",function(b){var a=mongoose.createConnection("127.0.0.1","faker",28000,{server:{auto_reconnect:false}},function(){b()});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(false,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(28000,a.port);a.close()});it("should fire when no options are passed",function(b){var a=mongoose.createConnection("127.0.0.1","faker",28000,function(){b()});assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(28000,a.port);a.close()});it("should fire when default port utilized",function(b){var a=mongoose.createConnection("127.0.0.1","faker",b);assert.equal("object",typeof a.options);assert.equal("object",typeof a.options.server);assert.equal(true,a.options.server.auto_reconnect);assert.equal("object",typeof a.options.db);assert.equal(false,a.options.db.forceServerObjectId);assert.equal("faker",a.name);assert.equal("127.0.0.1",a.host);assert.equal(27017,a.port);a.close()})});describe("errors",function(){it("should be thrown when there are no listeners",function(b){var c=process._events.uncaughtException;process._events.uncaughtException=function(d){assert.ok(d);process._events.uncaughtException=c;b()};var a=start({uri:"mongodb://whatever23939.localhost/noooope",noErrorListener:1})});it("should occur without hanging when password with special chars is used (gh-460)",function(b){var a=mongoose.createConnection("mongodb://aaron:psw?@localhost/fake",function(c){assert.ok(c);a.close();b()})})});describe(".model()",function(){it("allows passing a schema",function(){var a=start();var c=a.model("MyModelasdf",new Schema({name:String}));a.close();assert.ok(c.schema instanceof Schema);assert.ok(c.prototype.schema instanceof Schema);var b=new c({name:"aaron"});assert.equal("aaron",b.name)});it("should properly assign the db",function(){var a=mongoose.model("testing853a",new Schema({x:String}),"testing853-1");var b=mongoose.model("testing853b",new Schema({x:String}),"testing853-2");var c=b.model("testing853a");assert.ok(c==a)})});it("error event fires with one listener",function(b){var a=start({uri:"mongodb://localasdfads/fakeeee",noErrorListener:1});a.on("error",function(){b()})})});