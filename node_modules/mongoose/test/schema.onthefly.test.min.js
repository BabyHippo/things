var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Schema=mongoose.Schema,ObjectId=Schema.ObjectId;var DecoratedSchema=new Schema({title:String},{strict:false});mongoose.model("Decorated",DecoratedSchema);var collection="decorated_"+random();describe("schema.onthefly",function(){it("setting should cache the schema type and cast values appropriately",function(){var a=start(),b=a.model("Decorated",collection);a.close();var c=new b();c.set("adhoc","9",Number);assert.equal(9,c.get("adhoc").valueOf())});it("should be local to the particular document",function(){var a=start(),b=a.model("Decorated",collection);a.close();var c=new b();c.set("adhoc","9",Number);assert.notStrictEqual(c._path("adhoc"),undefined);var d=new b();assert.notStrictEqual(d._path("title"),undefined);assert.strictEqual(undefined,d._path("adhoc"))});it("querying a document that had an on the fly schema should work",function(c){var a=start(),b=a.model("Decorated",collection);var d=new b({title:"AD HOC"});d.set("adhoc","9",Number);assert.equal(9,d.get("adhoc").valueOf());d.save(function(e){assert.ifError(e);assert.strictEqual(null,e);b.findById(d.id,function(f,g){a.close();assert.strictEqual(null,f);assert.equal(9,g.get("adhoc"));assert.equal("9",g.get("adhoc",String));assert.equal("9",g.get("adhoc"));c()})})});it("on the fly Embedded Array schemas should cast properly",function(){var a=start(),b=a.model("Decorated",collection);a.close();var c=new b();c.set("moderators",[{name:"alex trebek"}],[new Schema({name:String})]);assert.equal(c.get("moderators")[0].name,"alex trebek")});it("on the fly Embedded Array schemas should get from a fresh queried document properly",function(c){var a=start(),b=a.model("Decorated",collection);var e=new b(),d=new Schema({name:String,ranking:Number});e.set("moderators",[{name:"alex trebek",ranking:"1"}],[d]);assert.equal(e.get("moderators")[0].name,"alex trebek");e.save(function(f){assert.ifError(f);b.findById(e.id,function(g,h){a.close();assert.ifError(g);var k=h.get("moderators")[0].ranking;assert.equal(1,k);assert.strictEqual(undefined,k.increment);var j=h.get("moderators",[d])[0].ranking;assert.equal(1,j);var i=new Schema({name:String,ranking:String});j=h.get("moderators",[i])[0].ranking;assert.equal(1,j);c()})})});it("should support on the fly nested documents",function(){})});