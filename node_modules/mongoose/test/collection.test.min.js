var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),Collection=require("../lib/collection");describe("collections:",function(){it("should buffer commands until connection is established",function(d){var c=mongoose.createConnection(),a=c.collection("test-buffering-collection"),b=false,f=false,g=2;function e(){if(--g){return}assert.ok(b);assert.ok(f);d()}a.insert({},{safe:true},function(){assert.ok(b);f=true;c.close();e()});var h="mongodb://localhost/mongoose_test";c.open(process.env.MONGOOSE_TEST_URI||h,function(i){b=!i;e()})});it("methods should that throw (unimplemented)",function(){var a=new Collection("test",mongoose.connection),c=false;try{a.getIndexes()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.update()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.save()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.insert()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.find()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.findOne()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.findAndModify()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false;try{a.ensureIndex()}catch(b){assert.ok(/unimplemented/.test(b.message));c=true}assert.ok(c);c=false})});