var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Query=require("../lib/query"),Schema=mongoose.Schema,SchemaType=mongoose.SchemaType,CastError=SchemaType.CastError,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,ObjectId=Schema.ObjectId,DocumentObjectId=mongoose.Types.ObjectId,DocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=mongoose.Types.Embedded,MongooseArray=mongoose.Types.Array,MongooseError=mongoose.Error;var Comments=new Schema();Comments.add({title:String,date:Date,body:String,comments:[Comments]});var BlogPost=new Schema({title:String,author:String,slug:String,date:Date,meta:{date:Date,visitors:Number},published:Boolean,mixed:{},numbers:[Number],owners:[ObjectId],comments:[Comments]});var collection="mapreduce_"+random();mongoose.model("MapReduce",BlogPost);describe("model: mapreduce:",function(){it("works",function(d){var b=start(),f=b.model("MapReduce",collection);var a="aaron guillermo brian nathan".split(" ");var g=10;var c=[];for(var e=0;e<g;++e){c.push({author:a[e%a.length]})}f.create(c,function(h){assert.ifError(h);var j={map:function(){emit(this.author,1)},reduce:function(l,m){return m.length}};f.mapReduce(j,function(k,m,n){assert.ifError(k);assert.ok(Array.isArray(m));assert.ok(n);m.forEach(function(o){if("aaron"==o._id){assert.equal(3,o.value)}if("guillermo"==o._id){assert.equal(3,o.value)}if("brian"==o._id){assert.equal(2,o.value)}if("nathan"==o._id){assert.equal(2,o.value)}});var l={map:function(){emit(this.author,1)},reduce:function(o,p){return p.length},query:{author:"aaron"}};f.mapReduce(l,function(o,p,q){assert.ifError(o);assert.ok(Array.isArray(p));assert.equal(1,p.length);assert.equal("aaron",p[0]._id);assert.equal(3,p[0].value);assert.ok(q);i()})});function i(){var k={map:function(){emit(this.author,1)},reduce:function(l,m){return m.length},out:{replace:"_mapreduce_test_"+random()}};f.mapReduce(k,function(l,m,n){assert.ifError(l);assert.ok(!Array.isArray(m));assert.equal("function",typeof m.findOne);assert.equal("function",typeof m.mapReduce);m.where("value").gt(1).sort({_id:1}).exec(function(p,o){assert.ifError(p);assert.equal("aaron",o[0]._id);assert.equal("brian",o[1]._id);assert.equal("guillermo",o[2]._id);assert.equal("nathan",o[3]._id);m.findOneAndUpdate({_id:"aaron"},{published:true},function(r,q){b.close();assert.ifError(r);assert.ok(q);assert.equal("aaron",q._id);assert.equal(true,q.published);d()})})})}})})});