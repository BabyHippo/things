var start=require("./common"),mongoose=start.mongoose,assert=require("assert"),random=require("../lib/utils").random,Schema=mongoose.Schema,ObjectId=Schema.ObjectId,Document=require("../lib/document"),DocumentObjectId=mongoose.Types.ObjectId,SchemaType=mongoose.SchemaType,ValidatorError=SchemaType.ValidatorError,ValidationError=mongoose.Document.ValidationError,MongooseError=mongoose.Error;function TestDocument(){Document.apply(this,arguments)}TestDocument.prototype.__proto__=Document.prototype;var em=new Schema({title:String,body:String});em.virtual("works").get(function(){return"em virtual works"});var schema=new Schema({test:String,oids:[ObjectId],numbers:[Number],nested:{age:Number,cool:ObjectId,deep:{x:String},path:String,setr:String},nested2:{nested:String,yup:{nested:Boolean,yup:String,age:Number}},em:[em]});TestDocument.prototype._setSchema(schema);schema.virtual("nested.agePlus2").get(function(a){return this.nested.age+2});schema.virtual("nested.setAge").set(function(a){this.nested.age=a});schema.path("nested.path").get(function(a){return this.nested.age+(a?a:"")});schema.path("nested.setr").set(function(a){return a+" setter"});TestDocument.prototype.hooksTest=function(a){a(null,arguments)};describe("document:",function(){it("test shortcut getters",function(){var a=new TestDocument();a.init({test:"test",oids:[],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path"}});assert.equal("test",a.test);assert.ok(a.oids instanceof Array);assert.equal(a.nested.age,5);assert.equal(DocumentObjectId.toString(a.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal(7,a.nested.agePlus2);assert.equal("5my path",a.nested.path);a.nested.setAge=10;assert.equal(10,a.nested.age);a.nested.setr="set it";assert.equal(a.getValue("nested.setr"),"set it setter");var b=new TestDocument();b.init({test:"toop",oids:[],nested:{age:2,cool:DocumentObjectId.fromString("4cf70857337498f95900001c"),deep:{x:"yay"}}});assert.equal("toop",b.test);assert.ok(b.oids instanceof Array);assert.equal(b.nested.age,2);assert.equal(b.nested.bonk,undefined);assert.equal(b.nested.nested,undefined);assert.equal(b.nested.test,undefined);assert.equal(b.nested.age.test,undefined);assert.equal(b.nested.age.nested,undefined);assert.equal(b.oids.nested,undefined);assert.equal(b.nested.deep.x,"yay");assert.equal(b.nested.deep.nested,undefined);assert.equal(b.nested.deep.cool,undefined);assert.equal(b.nested2.yup.nested,undefined);assert.equal(b.nested2.yup.nested2,undefined);assert.equal(b.nested2.yup.yup,undefined);assert.equal(b.nested2.yup.age,undefined);assert.equal("object",typeof b.nested2.yup);b.nested2.yup={age:150,yup:"Yesiree",nested:true};assert.equal(b.nested2.nested,undefined);assert.equal(b.nested2.yup.nested,true);assert.equal(b.nested2.yup.yup,"Yesiree");assert.equal(b.nested2.yup.age,150);b.nested2.nested="y";assert.equal(b.nested2.nested,"y");assert.equal(b.nested2.yup.nested,true);assert.equal(b.nested2.yup.yup,"Yesiree");assert.equal(150,b.nested2.yup.age);assert.equal(DocumentObjectId.toString(b.nested.cool),"4cf70857337498f95900001c");assert.ok(a.oids!==b.oids)});it("test shortcut setters",function(){var a=new TestDocument();a.init({test:"Test",nested:{age:5}});assert.equal(a.isModified("test"),false);a.test="Woot";assert.equal("Woot",a.test);assert.equal(true,a.isModified("test"));assert.equal(a.isModified("nested.age"),false);a.nested.age=2;assert.equal(2,a.nested.age);assert.ok(a.isModified("nested.age"))});it("test accessor of id",function(){var a=new TestDocument();assert.ok(a._id instanceof DocumentObjectId)});it("test shortcut of id hexString",function(){var b=new TestDocument(),a=b._id.toString();assert.equal("string",typeof b.id)});it("test toObject clone",function(){var b=new TestDocument();b.init({test:"test",oids:[],nested:{age:5,cool:new DocumentObjectId}});var a=b.toObject();a.test._marked=true;a.nested._marked=true;a.nested.age._marked=true;a.nested.cool._marked=true;assert.equal(b._doc.test._marked,undefined);assert.equal(b._doc.nested._marked,undefined);assert.equal(b._doc.nested.age._marked,undefined);assert.equal(b._doc.nested.cool._marked,undefined)});it("toObject options",function(){var b=new TestDocument();b.init({test:"test",oids:[],em:[{title:"asdf"}],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path"},nested2:{}});var a=b.toObject({getters:true,virtuals:false});assert.equal(a.test,"test");assert.ok(a.oids instanceof Array);assert.equal(5,a.nested.age);assert.equal(DocumentObjectId.toString(a.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal("5my path",a.nested.path);assert.equal(undefined,a.nested.agePlus2);assert.equal(undefined,a.em[0].works);a=b.toObject({virtuals:true});assert.equal("test",a.test);assert.ok(a.oids instanceof Array);assert.equal(5,a.nested.age);assert.equal(DocumentObjectId.toString(a.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal("my path",a.nested.path);assert.equal(7,a.nested.agePlus2);assert.equal(a.em[0].works,"em virtual works");a=b.toObject({getters:true});assert.equal("test",a.test);assert.ok(a.oids instanceof Array);assert.equal(5,a.nested.age);assert.equal(DocumentObjectId.toString(a.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal("5my path",a.nested.path);assert.equal(7,a.nested.agePlus2);assert.equal("em virtual works",a.em[0].works);b.schema.options.toObject={virtuals:true};a=b.toObject();assert.equal("test",a.test);assert.ok(a.oids instanceof Array);assert.equal(5,a.nested.age);assert.equal(DocumentObjectId.toString(a.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal("my path",a.nested.path);assert.equal(7,a.nested.agePlus2);assert.equal("asdf",a.em[0].title);delete b.schema.options.toObject;a=b.toObject({minimize:true});assert.equal(undefined,a.nested2);a=b.toObject({minimize:false});assert.equal("Object",a.nested2.constructor.name);assert.equal(1,Object.keys(a.nested2).length);a=b.toObject("2");assert.equal(undefined,a.nested2);b.schema.options.toObject={minimize:false};a=b.toObject();assert.equal("Object",a.nested2.constructor.name);assert.equal(1,Object.keys(a.nested2).length);delete b.schema.options.toObject;b.schema.options.minimize=false;a=b.toObject();assert.equal("Object",a.nested2.constructor.name);assert.equal(1,Object.keys(a.nested2).length);b.schema.options.minimize=true;a=b.toObject();assert.equal(undefined,a.nested2)});it("toJSON options",function(){var d=new TestDocument();d.init({test:"test",oids:[],em:[{title:"asdf"}],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path"},nested2:{}});var f=TestDocument.prototype.schema.path("em");f.casterConstructor.prototype.toJSON=function(){return{}};d.schema.options.toJSON={virtuals:true};var c=d.toJSON();assert.equal("test",c.test);assert.ok(c.oids instanceof Array);assert.equal(5,c.nested.age);assert.equal(DocumentObjectId.toString(c.nested.cool),"4c6c2d6240ced95d0e00003c");assert.equal("my path",c.nested.path);assert.equal(7,c.nested.agePlus2);assert.equal("Object",c.em[0].constructor.name);assert.equal(0,Object.keys(c.em[0]).length);delete d.schema.options.toJSON;delete f.casterConstructor.prototype.toJSON;d.schema.options.toJSON={minimize:false};c=d.toJSON();assert.equal("Object",c.nested2.constructor.name);assert.equal(1,Object.keys(c.nested2).length);c=d.toJSON("8");assert.equal("Object",c.nested2.constructor.name);assert.equal(1,Object.keys(c.nested2).length);var b=[d],e=false,g;try{g=JSON.stringify(b)}catch(a){e=true}assert.equal(false,e);assert.ok(/nested2/.test(g));assert.equal("Object",c.nested2.constructor.name);assert.equal(1,Object.keys(c.nested2).length);delete d.schema.options.toJSON});it("jsonifying an object",function(){var a=new TestDocument({test:"woot"}),d=DocumentObjectId.toString(a._id);var b=JSON.stringify(a);var c=JSON.parse(b);assert.equal("woot",c.test);assert.equal(c._id,d)});it("calling update on document should relay to its model (gh-794)",function(g){var c=start();var f=new Schema({text:String});var e=c.model("docRelayUpdate",f);var b=new e({text:"A doc"});var a=false;b.save(function(){var d=e.update;e.update=function(i,h){assert.equal(1,Object.keys(i).length);assert.equal(i._id,b._id);assert.equal(1,Object.keys(h).length);assert.equal(1,Object.keys(h.$set).length);assert.equal(h.$set.text,"A changed doc");a=true;e.update=d;d.apply(e,arguments)};b.update({$set:{text:"A changed doc"}},function(h){c.close();assert.ifError(h);assert.equal(true,a);g()})})});it("toObject should not set undefined values to null",function(){var a=new TestDocument(),b=a.toObject();delete b._id;assert.deepEqual(b,{numbers:[],oids:[],em:[]})});describe("Errors",function(){it("MongooseErrors should be instances of Error (gh-209)",function(){var b=require("../lib/error"),a=new b("Some message");assert.ok(a instanceof Error)});it("ValidationErrors should be instances of Error",function(){var b=Document.ValidationError,a=new b(new TestDocument);assert.ok(a instanceof Error)})});it("methods on embedded docs should work",function(){var a=start(),c=new Schema({name:String});c.methods.test=function(){return this.name+" butter"};c.statics.ten=function(){return 10};var b=a.model("EmbeddedMethodsAndStaticsE",c);var f=new Schema({embed:[c]});var e=a.model("EmbeddedMethodsAndStaticsP",f);a.close();var d=new e({embed:[{name:"peanut"}]});assert.equal("function",typeof d.embed[0].test);assert.equal("function",typeof b.ten);assert.equal("peanut butter",d.embed[0].test());assert.equal(10,b.ten());d=new e;d.embed.push({name:"apple"});assert.equal("function",typeof d.embed[0].test);assert.equal("function",typeof b.ten);assert.equal("apple butter",d.embed[0].test())});it("setting a positional path does not cast value to array",function(){var a=new TestDocument;a.init({numbers:[1,3]});assert.equal(1,a.numbers[0]);assert.equal(3,a.numbers[1]);a.set("numbers.1",2);assert.equal(1,a.numbers[0]);assert.equal(2,a.numbers[1])});it("no maxListeners warning should occur",function(){var a=start();var f=false;var e=console.trace;console.trace=function(){f=true;console.trace=e};var d=new Schema({title:String,embed1:[new Schema({name:String})],embed2:[new Schema({name:String})],embed3:[new Schema({name:String})],embed4:[new Schema({name:String})],embed5:[new Schema({name:String})],embed6:[new Schema({name:String})],embed7:[new Schema({name:String})],embed8:[new Schema({name:String})],embed9:[new Schema({name:String})],embed10:[new Schema({name:String})],embed11:[new Schema({name:String})]});var c=a.model("noMaxListeners",d);var b=new c({title:"test"});a.close();assert.equal(false,f)});it("isSelected()",function(){var a=new TestDocument();a.init({test:"test",numbers:[4,5,6,7],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path",deep:{x:"a string"}},notapath:"i am not in the schema",em:[{title:"gocars"}]});assert.ok(a.isSelected("_id"));assert.ok(a.isSelected("test"));assert.ok(a.isSelected("numbers"));assert.ok(a.isSelected("oids"));assert.ok(a.isSelected("nested"));assert.ok(a.isSelected("nested.age"));assert.ok(a.isSelected("nested.cool"));assert.ok(a.isSelected("nested.path"));assert.ok(a.isSelected("nested.deep"));assert.ok(a.isSelected("nested.nope"));assert.ok(a.isSelected("nested.deep.x"));assert.ok(a.isSelected("nested.deep.x.no"));assert.ok(a.isSelected("nested.deep.y"));assert.ok(a.isSelected("noway"));assert.ok(a.isSelected("notapath"));assert.ok(a.isSelected("em"));assert.ok(a.isSelected("em.title"));assert.ok(a.isSelected("em.body"));assert.ok(a.isSelected("em.nonpath"));var b={test:1,numbers:1,"nested.deep":1,oids:1};a=new TestDocument(undefined,b);a.init({test:"test",numbers:[4,5,6,7],nested:{deep:{x:"a string"}}});assert.ok(a.isSelected("_id"));assert.ok(a.isSelected("test"));assert.ok(a.isSelected("numbers"));assert.ok(a.isSelected("oids"));assert.ok(a.isSelected("nested"));assert.ok(!a.isSelected("nested.age"));assert.ok(!a.isSelected("nested.cool"));assert.ok(!a.isSelected("nested.path"));assert.ok(a.isSelected("nested.deep"));assert.ok(!a.isSelected("nested.nope"));assert.ok(a.isSelected("nested.deep.x"));assert.ok(a.isSelected("nested.deep.x.no"));assert.ok(a.isSelected("nested.deep.y"));assert.ok(!a.isSelected("noway"));assert.ok(!a.isSelected("notapath"));assert.ok(!a.isSelected("em"));assert.ok(!a.isSelected("em.title"));assert.ok(!a.isSelected("em.body"));assert.ok(!a.isSelected("em.nonpath"));var b={"em.title":1};a=new TestDocument(undefined,b);a.init({em:[{title:"one"}]});assert.ok(a.isSelected("_id"));assert.ok(!a.isSelected("test"));assert.ok(!a.isSelected("numbers"));assert.ok(!a.isSelected("oids"));assert.ok(!a.isSelected("nested"));assert.ok(!a.isSelected("nested.age"));assert.ok(!a.isSelected("nested.cool"));assert.ok(!a.isSelected("nested.path"));assert.ok(!a.isSelected("nested.deep"));assert.ok(!a.isSelected("nested.nope"));assert.ok(!a.isSelected("nested.deep.x"));assert.ok(!a.isSelected("nested.deep.x.no"));assert.ok(!a.isSelected("nested.deep.y"));assert.ok(!a.isSelected("noway"));assert.ok(!a.isSelected("notapath"));assert.ok(a.isSelected("em"));assert.ok(a.isSelected("em.title"));assert.ok(!a.isSelected("em.body"));assert.ok(!a.isSelected("em.nonpath"));var b={em:0};a=new TestDocument(undefined,b);a.init({test:"test",numbers:[4,5,6,7],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path",deep:{x:"a string"}},notapath:"i am not in the schema"});assert.ok(a.isSelected("_id"));assert.ok(a.isSelected("test"));assert.ok(a.isSelected("numbers"));assert.ok(a.isSelected("oids"));assert.ok(a.isSelected("nested"));assert.ok(a.isSelected("nested.age"));assert.ok(a.isSelected("nested.cool"));assert.ok(a.isSelected("nested.path"));assert.ok(a.isSelected("nested.deep"));assert.ok(a.isSelected("nested.nope"));assert.ok(a.isSelected("nested.deep.x"));assert.ok(a.isSelected("nested.deep.x.no"));assert.ok(a.isSelected("nested.deep.y"));assert.ok(a.isSelected("noway"));assert.ok(a.isSelected("notapath"));assert.ok(!a.isSelected("em"));assert.ok(!a.isSelected("em.title"));assert.ok(!a.isSelected("em.body"));assert.ok(!a.isSelected("em.nonpath"));var b={_id:0};a=new TestDocument(undefined,b);a.init({test:"test",numbers:[4,5,6,7],nested:{age:5,cool:DocumentObjectId.fromString("4c6c2d6240ced95d0e00003c"),path:"my path",deep:{x:"a string"}},notapath:"i am not in the schema"});assert.ok(!a.isSelected("_id"));assert.ok(a.isSelected("nested.deep.x.no"));a=new TestDocument({test:"boom"});assert.ok(a.isSelected("_id"));assert.ok(a.isSelected("test"));assert.ok(a.isSelected("numbers"));assert.ok(a.isSelected("oids"));assert.ok(a.isSelected("nested"));assert.ok(a.isSelected("nested.age"));assert.ok(a.isSelected("nested.cool"));assert.ok(a.isSelected("nested.path"));assert.ok(a.isSelected("nested.deep"));assert.ok(a.isSelected("nested.nope"));assert.ok(a.isSelected("nested.deep.x"));assert.ok(a.isSelected("nested.deep.x.no"));assert.ok(a.isSelected("nested.deep.y"));assert.ok(a.isSelected("noway"));assert.ok(a.isSelected("notapath"));assert.ok(a.isSelected("em"));assert.ok(a.isSelected("em.title"));assert.ok(a.isSelected("em.body"));assert.ok(a.isSelected("em.nonpath"));var b={_id:1};a=new TestDocument(undefined,b);a.init({_id:"test"});assert.ok(a.isSelected("_id"));assert.ok(!a.isSelected("test"));a=new TestDocument({test:"boom"},true);assert.ok(a.isSelected("_id"));assert.ok(a.isSelected("test"));assert.ok(a.isSelected("numbers"));assert.ok(a.isSelected("oids"));assert.ok(a.isSelected("nested"));assert.ok(a.isSelected("nested.age"));assert.ok(a.isSelected("nested.cool"));assert.ok(a.isSelected("nested.path"));assert.ok(a.isSelected("nested.deep"));assert.ok(a.isSelected("nested.nope"));assert.ok(a.isSelected("nested.deep.x"));assert.ok(a.isSelected("nested.deep.x.no"));assert.ok(a.isSelected("nested.deep.y"));assert.ok(a.isSelected("noway"));assert.ok(a.isSelected("notapath"));assert.ok(a.isSelected("em"));assert.ok(a.isSelected("em.title"));assert.ok(a.isSelected("em.body"));assert.ok(a.isSelected("em.nonpath"))});it("unselected required fields should pass validation",function(){var a=start(),d=new Schema({name:String,req:{type:String,required:true}}),c=a.model("unselectedRequiredFieldValidation",d);var b=new c({name:"teeee",req:"i am required"});b.save(function(e){assert.ifError(e);c.findById(b).select("name").exec(function(f,g){assert.ifError(f);assert.equal(undefined,g.req);g.name="wooo";g.save(function(h){assert.ifError(h);c.findById(g).select("name").exec(function(i,j){assert.ifError(i);j.req=undefined;j.save(function(k){k=String(k);var l=/Validator "required" failed for path req/.test(k);assert.ok(l);j.req="it works again";j.save(function(m){assert.ifError(m);c.findById(j).select("_id").exec(function(n,o){assert.ifError(n);o.save(function(p){a.close();assert.ifError(p)})})})})})})})})});it("#validate (gh-891)",function(c){var b=start(),f=null,a=false;var g=[function(h){a=true;return true},"BAM"];f=new Schema({prop:{type:String,required:true,validate:g},nick:{type:String,required:true}});var e=b.model("validateSchema",f,"validateschema_"+random());var d=new e({prop:"gh891",nick:"validation test"});d.save(function(h){assert.ifError(h);assert.equal(true,a);a=false;e.findById(d,"nick",function(i,j){assert.equal(false,a);assert.ifError(i);j.nick="gh-891";j.save(function(k){assert.equal(false,a);assert.ifError(k);c()})})})});it("#invalidate",function(b){var a=start(),c=null,e=null,d=null;c=new Schema({prop:{type:String},},{strict:false});mongoose.model("InvalidateSchema",c);e=a.model("InvalidateSchema");d=new e();d.set({baz:"val"});d.invalidate("baz","reason");d.save(function(f){assert.ok(f instanceof MongooseError);assert.ok(f instanceof ValidationError);assert.ok(f.errors.baz instanceof ValidatorError);assert.equal(f.errors.baz.message,'Validator "reason" failed for path baz');assert.equal(f.errors.baz.type,"reason");assert.equal(f.errors.baz.path,"baz");d.save(function(g){a.close();assert.strictEqual(g,null);b()})})});describe("#equals",function(){describe("should work",function(){var a=start();var d=a.model("equals-S",new Schema({_id:String}));var b=a.model("equals-N",new Schema({_id:Number}));var c=a.model("equals-O",new Schema({_id:Schema.ObjectId}));it("with string _ids",function(){var e=new d({_id:"one"});var f=new d({_id:"one"});assert.ok(e.equals(f))});it("with number _ids",function(){var e=new b({_id:0});var f=new b({_id:0});assert.ok(e.equals(f))});it("with ObjectId _ids",function(){var e=new mongoose.Types.ObjectId;var f=new c({_id:e});var g=new c({_id:e});assert.ok(f.equals(g));e=String(new mongoose.Types.ObjectId);f=new c({_id:e});g=new c({_id:e});assert.ok(f.equals(g))});after(function(){a.close()})})})});