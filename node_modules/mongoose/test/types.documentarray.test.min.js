var start=require("./common"),mongoose=require("./common").mongoose,random=require("../lib/utils").random,MongooseArray=mongoose.Types.Array,MongooseDocumentArray=mongoose.Types.DocumentArray,EmbeddedDocument=require("../lib/types/embedded"),DocumentArray=require("../lib/types/documentarray"),Schema=mongoose.Schema,assert=require("assert"),collection="types.documentarray_"+random();function TestDoc(a){var b=function(){EmbeddedDocument.call(this,{},new DocumentArray)};b.prototype.__proto__=EmbeddedDocument.prototype;var c=new Schema({title:{type:String}});b.prototype._setSchema(a||c);return b}describe("types.documentarray",function(){it("behaves and quakcs like an array",function(){var c=new MongooseDocumentArray();assert.ok(c instanceof Array);assert.ok(c instanceof MongooseArray);assert.ok(c instanceof MongooseDocumentArray);assert.ok(Array.isArray(c));assert.equal("Object",c._atomics.constructor.name);assert.equal("object",typeof c);var d=new MongooseArray([1,2,3,4]);assert.equal("object",typeof d);assert.equal(Object.keys(d.toObject()).length,4)});it("#id",function(){var n=TestDoc();var j=new n();j.title="Hello again to all my friends";var f=j.id;var b=new MongooseDocumentArray([j]);assert.equal(b.id(f).title,"Hello again to all my friends");assert.equal(b.id(j._id).title,"Hello again to all my friends");var d=new Schema({title:{type:String},_id:{type:String,required:true}});var n=TestDoc(d);var k=new n();k.title="together we can play some rock-n-roll";k._id="a25";var g=k.id;var b=new MongooseDocumentArray([k]);assert.equal(b.id(g).title,"together we can play some rock-n-roll");assert.equal(b.id(k._id).title,"together we can play some rock-n-roll");var c=new Schema({title:{type:String},_id:{type:Number,required:true}});var n=TestDoc(c);var l=new n();l.title="rock-n-roll";l._id=1995;var h=l.id;var b=new MongooseDocumentArray([l]);assert.equal(b.id(h).title,"rock-n-roll");assert.equal(b.id(l._id).title,"rock-n-roll");var i=new Schema({title:{type:String}},{noId:true});var n=TestDoc(i);var m=new n();m.title="rock-n-roll";var b=new MongooseDocumentArray([m]),o=false;try{b.id("i better not throw")}catch(e){o=e}assert.equal(false,o)});describe("inspect",function(){it("works with bad data",function(){var d=false;var b=new MongooseDocumentArray([null]);try{b.inspect()}catch(c){d=true;console.error(c.stack)}assert.ok(!d)})});describe("toObject",function(){it("works with bad data",function(){var d=false;var b=new MongooseDocumentArray([null]);try{b.toObject()}catch(c){d=true;console.error(c.stack)}assert.ok(!d)})});describe("EmbeddedDocumentArray",function(){describe("create()",function(){it("works",function(){var b=new MongooseDocumentArray([]);assert.equal("function",typeof b.create);var c=new Schema({docs:[new Schema({name:"string"})]});var f=mongoose.model("embeddedDocument#create_test",c,"asdfasdfa"+random());var e=new f;assert.equal("function",typeof e.docs.create);var d=e.docs.create({name:100});assert.ok(d._id);assert.equal(d.name,"100");assert.ok(d instanceof EmbeddedDocument)})})});it("#push should work on EmbeddedDocuments more than 2 levels deep",function(g){var e=new Schema;e.add({title:String,comments:[e]});var a=new Schema({title:String,comments:[e]});var f=start(),i=f.model("docarray-BlogPost",a,collection);var h=new i({title:"comment nesting"});var b=h.comments.create({title:"c1"});var c=h.comments.create({title:"c2"});var d=h.comments.create({title:"c3"});h.comments.push(b);b.comments.push(c);c.comments.push(d);h.save(function(j){assert.ifError(j);i.findById(h._id,function(l,m){assert.ifError(l);var k=m.comments.create({title:"c4"});m.comments[0].comments[0].comments[0].comments.push(k);m.save(function(n){assert.ifError(n);i.findById(m._id,function(o,q){f.close();assert.ifError(o);assert.equal(q.comments[0].comments[0].comments[0].comments[0].title,"c4");g()})})})})})});