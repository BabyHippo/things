var url=require("url"),start=require("./common"),assert=require("assert"),mongoose=start.mongoose,Mongoose=mongoose.Mongoose,Schema=mongoose.Schema,random=require("../lib/utils").random,collection="blogposts_"+random();describe("mongoose module:",function(){it("default connection works",function(b){var a=mongoose.connection,c="mongodb://localhost/mongoose_test";mongoose.connect(process.env.MONGOOSE_TEST_URI||c);a.on("open",function(){a.close(function(){b()})})});it("{g,s}etting options",function(){var a=new Mongoose();a.set("a","b");a.set("long option","c");assert.equal("b",a.get("a"));assert.equal("b",a.set("a"));assert.equal("c",a.get("long option"))});it("declaring global plugins",function(){var b=new Mongoose(),c=new Schema(),a=0;b.plugin(function(d){assert.equal(d,c);a++});c.plugin(function(d){assert.equal(d,c);a++});b.model("GlobalPlugins",c);assert.equal(2,a)});describe("disconnection of all connections",function(){describe("no callback",function(){it("works",function(f){var g=new Mongoose(),i="mongodb://localhost/mongoose_test",b=0,e=0,h=4;g.connect(process.env.MONGOOSE_TEST_URI||i);var c=g.connection;function a(){if(--h){return}assert.equal(2,b);assert.equal(2,e);f()}c.on("open",function(){b++;a()});c.on("close",function(){e++;a()});var d=g.createConnection(process.env.MONGOOSE_TEST_URI||i);d.on("open",function(){b++;a()});d.on("close",function(){e++;a()});g.disconnect()});it("properly handles errors",function(){var d=new Mongoose(),e="mongodb://localhost/mongoose_test";d.connect(process.env.MONGOOSE_TEST_URI||e);var a=d.connection;a.close=function(f){f(new Error("bam"))};var c={};try{d.disconnect()}catch(b){c=b}assert.equal("bam",c.message)})});it("with callback",function(a){var b=new Mongoose(),c="mongodb://localhost/mongoose_test";b.connect(process.env.MONGOOSE_TEST_URI||c);b.connection.on("open",function(){b.disconnect(function(){a()})})})});describe("model()",function(){it("accessing a model that hasn't been defined",function(){var b=new Mongoose(),c=false;try{b.model("Test")}catch(a){assert.ok(/hasn't been registered/.test(a.message));c=true}assert.equal(true,c)});it("returns the model at creation",function(){var d=mongoose.model("Named",new Schema({name:String}));var a=new d();assert.equal(a.name,null);var b=new d({name:"Peter Bjorn"});assert.equal(b.name,"Peter Bjorn");var f=new Schema({number:Number});var e=mongoose.model("Numbered",f,collection);var c=new e({number:1234});assert.equal(1234,c.number.valueOf())})});it("connecting with a signature of host, database, function",function(a){var b=new Mongoose(),c=process.env.MONGOOSE_TEST_URI||"mongodb://localhost/mongoose_test";c=url.parse(c);b.connect(c.hostname,c.pathname.substr(1),function(d){assert.ifError(d);b.connection.close();a()})});it("goose.connect() to a replica set",function(a){var c=process.env.MONGOOSE_SET_TEST_URI;if(!c){console.log("\033[31m","\n","You're not testing replica sets!","\n","Please set the MONGOOSE_SET_TEST_URI env variable.","\n","e.g: `mongodb://localhost:27017/db,mongodb://localhostâ€¦`","\n","\033[39m");return a()}var b=new Mongoose();b.connect(c,function(d){assert.ifError(d);b.model("Test",new mongoose.Schema({test:String}));var f=b.model("Test"),e=new f();e.test="aa";e.save(function(g){assert.ifError(g);f.findById(e._id,function(i,h){assert.ifError(i);assert.equal("aa",h.test);b.connection.close();a()})})})});it("goose.createConnection() to a replica set",function(b){var d=process.env.MONGOOSE_SET_TEST_URI;if(!d){return b()}var c=new Mongoose();var a=c.createConnection(d,function(e){assert.ifError(e);c.model("ReplSetTwo",new mongoose.Schema({test:String}));var g=a.model("ReplSetTwo"),f=new g();f.test="aa";f.save(function(h){assert.ifError(h);g.findById(f._id,function(j,i){assert.ifError(j);assert.equal("aa",i.test);a.close();b()})})})});it("public exports",function(){assert.equal("string",typeof mongoose.version);assert.equal("function",typeof mongoose.Collection);assert.equal("function",typeof mongoose.Connection);assert.equal("function",typeof mongoose.Schema);assert.equal("function",typeof mongoose.SchemaType);assert.equal("function",typeof mongoose.Query);assert.equal("function",typeof mongoose.Promise);assert.equal("function",typeof mongoose.Model);assert.equal("function",typeof mongoose.Document)})});