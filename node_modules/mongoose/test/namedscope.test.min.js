var start=require("./common"),assert=require("assert"),mongoose=start.mongoose,random=require("../lib/utils").random,Schema=mongoose.Schema,_24hours=24*3600*1000;var UserNSSchema=new Schema({age:Number,gender:String,lastLogin:Date});UserNSSchema.namedScope("olderThan",function(a){return this.where("age").gt(a)});UserNSSchema.namedScope("youngerThan",function(a){return this.where("age").lt(a)});UserNSSchema.namedScope("twenties").olderThan(19).youngerThan(30);UserNSSchema.namedScope("male").where("gender","male");UserNSSchema.namedScope("female").where("gender","female");UserNSSchema.namedScope("active",function(){return this.where("lastLogin").gte(+new Date-_24hours)});mongoose.model("UserNS",UserNSSchema);describe("named scope",function(){it("basic named scopes should work, for find",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({gender:"male"},{gender:"male"},{gender:"female"},function(e,d){assert.ifError(e);c.male.find(function(f,g){a.close();assert.ifError(f);assert.equal(2,g.length);b()})})});it("dynamic named scopes should work, for find",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({age:21},{age:22},{age:19},function(e,d){assert.ifError(e);c.olderThan(20).find(function(f,g){a.close();assert.ifError(f);assert.equal(2,g.length);b()})})});it("named scopes built on top of dynamic named scopes should work, for find",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({age:21},{age:22},{age:19},function(e,d){assert.ifError(e);c.twenties.find(function(f,g){a.close();assert.ifError(f);assert.equal(2,g.length);b()})})});it("chaining named scopes should work, for find",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({age:21,gender:"male",lastLogin:(+new Date)-_24hours-3600},{age:45,gender:"male",lastLogin:+new Date},{age:50,gender:"female",lastLogin:+new Date},function(e,d,f,d){assert.ifError(e);c.olderThan(40).active.male.find(function(g,h){a.close();assert.ifError(g);assert.equal(1,h.length);assert.deepEqual(h[0]._id,f._id);b()})})});it("basic named scopes should work, for remove",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({gender:"male"},{gender:"male"},{gender:"female"},function(e,d){assert.ifError(e);c.male.remove(function(f){assert.ifError(f);c.male.find(function(g,h){a.close();assert.ifError(g);assert.equal(0,h.length);b()})})})});it("basic named scopes should work, for update",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({gender:"male"},{gender:"male"},{gender:"female"},function(d,f,g,e){assert.ifError(d);c.male.update({gender:"female"},function(h){assert.ifError(h);c.female.find(function(i,j){assert.ifError(i);assert.equal(2,j.length);c.male.find(function(k,l){a.close();assert.ifError(k);assert.equal(1,l.length);b()})})})})});it("chained named scopes should work, for findOne",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({age:100,gender:"male"},function(d,e){assert.ifError(d);c.male.olderThan(99).findOne(function(f,g){a.close();assert.ifError(f);assert.deepEqual(g._id,e._id);b()})})});it("hybrid use of chained named scopes and ad hoc querying should work",function(b){var a=start(),c=a.model("UserNS","users_"+random());c.create({age:100,gender:"female"},function(d,e){assert.ifError(d);c.female.where("age").gt(99).findOne(function(f,g){a.close();assert.ifError(f);assert.deepEqual(g._id,e._id);b()})})})});